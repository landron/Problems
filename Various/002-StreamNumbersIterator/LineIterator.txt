A file contains a sequence of integers, stored one per line. Implement a class that facilitates
iteration over these integers.

A valid integer is a sequence of one or more digits (without leading zeros), optionally preceded
by a plus or minus sign, representing a number within the range [−1,000,000,000..1,000,000,000].
We allow spaces to appear in a line before and/or after a valid integer. Lines are separated with
the line-feed character (ASCII code 10).

There might be lines that do not represent valid integers, e.g. 2u1, 23.9, #12, 00, ++1,
2000000000. Such lines are considered to be comments, and should be discarded.

Define a class Solution with an input iterator (as defined by C++ 03 and 11) that iterates over
integers from an input stream compliant with the above format.

You should implement the following interface:

    #include <iosfwd>

    class Solution {

    public:
        Solution(istream& s);
        class iterator;

        iterator begin();
        iterator end();
    };

    /**
     * Example usage:
     *
     *   Solution sol(stream);
     *   for (Solution::iterator it = sol.begin(); it != sol.end(); ++it) {
     *      int x = *it;
     *      cout << x << endl;
     *   }
     */

For an input file containing the following lines:
    137
    -104
    2 58
      +0
    ++3
    +1
     23.9
    2000000000
    -0
    five
     -1

your iterator should return the following sequence of integers:
    [137, -104, 0, 1, 0, -1]

Assume that:

        the file can contain only line-feed characters (ASCII code 10) and printable ASCII
			characters (ASCII codes from 32 to 126);
        for every file your iterator will be used only once.

Copyright 2009–2016 by Codility Limited. All Rights Reserved. Unauthorized copying, publication
or disclosure prohibited.
